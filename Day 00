{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Setup and Programming Foundations\n",
    "\n",
    "Welcome to your coding journey! This lesson will get you set up with the tools you need and introduce you to the mindset of programming.\n",
    "\n",
    "**Learning Objectives**:\n",
    "- Set up your programming environment (Anaconda and Jupyter)\n",
    "- Learn to navigate Jupyter Notebooks\n",
    "- Understand what it means to \"know how to program\"\n",
    "- Develop strategies for learning and debugging\n",
    "- Learn how to find help when you're stuck\n",
    "\n",
    "* * * * *"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setting Up Your Environment\n",
    "\n",
    "Before we start coding, we need to make sure you have the right tools installed. Think of this like setting up your workspace before starting any project!\n",
    "\n",
    "### What You Need:\n",
    "1. **[Anaconda](https://www.anaconda.com/download/success)** - A package that includes Python and Jupyter Notebooks.\n",
    "2. **[VS Code](https://code.visualstudio.com)** - A program for editing software\n",
    "3. **[Discord](https://discord.com/download)** - For camp communication\n",
    "\n",
    "Your instructor will help you get these installed if you haven't already!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## What Is Programming?\n",
    "\n",
    "Programming is like giving very detailed instructions to a computer. Imagine you're teaching someone to make a sandwich, but they've never seen food before - you have to be extremely specific about every step!\n",
    "\n",
    "### What It Means to \"Know How to Program\"\n",
    "\n",
    "Most programmers can work in more than one programming language. That's because they understand *how to program* in general, not just one specific language like Python.\n",
    "\n",
    "Programming is a **transferable skill**. The basic concepts - like making decisions, repeating actions, and organizing information - exist in almost every programming language and throughout life!\n",
    "\n",
    "**Learning to program is NOT about memorization.** Even experienced programmers look things up constantly! Instead, it's about learning:\n",
    "1. General programming concepts and logic\n",
    "2. How to find and use new functions and tools\n",
    "3. How to solve problems when things go wrong\n",
    "\n",
    "**We don't learn specific programming languages; we learn how to program.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## What Programming Is Really Like\n",
    "\n",
    "Here's a secret: when you're programming, about 80% of your time is spent:\n",
    "- **Debugging** (fixing problems)\n",
    "- **Looking things up** (syntax, documentation, examples)\n",
    "- **Testing** (making sure your code works)\n",
    "\n",
    "Only about 20% of your time is actually typing out new code!\n",
    "\n",
    "This is completely normal and expected. Even professional programmers spend most of their time thinking, planning, and fixing rather than writing new code."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Navigating Jupyter Notebooks\n",
    "\n",
    "Jupyter Notebooks are made up of **cells**. Each cell can contain either:\n",
    "- **Code** (Python instructions)\n",
    "- **Markdown** (text, like what you're reading now)\n",
    "\n",
    "### Running Cells\n",
    "- **Shift + Enter**: Run the current cell and move to the next one\n",
    "- **Control + Enter** (or **Command + Enter** on Mac): Run the current cell but stay on it\n",
    "- **Enter**: Edit the current cell (if it's selected)\n",
    "\n",
    "### Try It Out!\n",
    "Run the cell below by clicking on it and pressing **Shift + Enter**:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"Hello, world! I'm learning to code!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Great! You just ran your first Python code. The `print()` function tells the computer to display text on the screen."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Multi-line Code\n",
    "\n",
    "If you press **Enter** (not Shift+Enter), you can write multiple lines of code in one cell:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"This is line 1\")\n",
    "print(\"This is line 2\")\n",
    "print(\"This is line 3\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Memory in Jupyter\n",
    "\n",
    "Jupyter remembers everything you've run, even if you can't see it anymore. Watch this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_name = \"Alex\"\n",
    "print(my_name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# This will work because Jupyter remembers the variable from above\n",
    "print(f\"Hello, {my_name}!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To clear Jupyter's memory, go to **Kernel → Restart** in the menu bar."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Helpful Jupyter Features\n",
    "\n",
    "**Tab Completion**: Start typing something and press **Tab** to see suggestions.\n",
    "\n",
    "**Comments**: Use `#` to add notes that won't run as code:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# This is a comment - it won't run\n",
    "print(\"But this will run!\")\n",
    "# Comments help explain what your code does"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Defensive Coding Strategies\n",
    "\n",
    "To save time and avoid frustration, follow these steps when programming:\n",
    "\n",
    "### 1. State Your Goal Clearly\n",
    "Before you start coding, write down exactly what you want your program to do. Be as specific as possible!\n",
    "\n",
    "### 2. Plan Your Steps\n",
    "Break down your goal into smaller, manageable steps. Think about the logic before you start typing.\n",
    "\n",
    "### 3. Build Step by Step\n",
    "- Write a little bit of code\n",
    "- Test it to make sure it works\n",
    "- Add the next piece\n",
    "- Test again\n",
    "\n",
    "### 4. Test Frequently\n",
    "Don't write 50 lines of code and then try to run it all at once. Test small pieces as you go!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## When Things Go Wrong: Debugging\n",
    "\n",
    "Here's a helpful workflow for when you encounter errors:\n",
    "\n",
    "### 1. Read the Error Message\n",
    "Python tries to tell you what went wrong. The error message might look scary, but it contains useful information.\n",
    "\n",
    "### 2. Check Your Syntax\n",
    "Look for:\n",
    "- Missing parentheses: `print(\"hello\"`\n",
    "- Missing quotes: `print(hello world)`\n",
    "- Incorrect indentation\n",
    "\n",
    "### 3. Make It Smaller\n",
    "If you have a lot of code, try running just one line at a time to find where the problem is.\n",
    "\n",
    "### 4. Use Print Statements\n",
    "Add `print()` statements to see what your code is actually doing.\n",
    "\n",
    "Let's see an error in action:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# This will cause an error - can you figure out why?\n",
    "print(undefined_variable)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The error tells us that `undefined_variable` is not defined. We need to create it first!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fixed version:\n",
    "undefined_variable = \"Now it's defined!\"\n",
    "print(undefined_variable)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Finding Help Online\n",
    "\n",
    "When you're stuck, the internet is your friend! Here's how to get help effectively:\n",
    "\n",
    "### Google Search Tips\n",
    "1. Include \"Python\" in your search\n",
    "2. Copy the error message (but remove any personal information)\n",
    "3. Be specific about what you're trying to do\n",
    "\n",
    "**Example**: Instead of searching \"code doesn't work\", search \"Python NameError variable not defined\"\n",
    "\n",
    "### Stack Overflow\n",
    "[Stack Overflow](https://stackoverflow.com) is a website where programmers ask and answer questions. Many of your Google searches will lead you here. Look for:\n",
    "- Questions similar to yours\n",
    "- Answers with lots of upvotes\n",
    "- Code examples you can adapt\n",
    "\n",
    "### LLMs (Like ChatGPT) and AI Tools\n",
    "[ChatGPT](https://chatgpt.com) can be incredibly helpful for:\n",
    "- Explaining error messages\n",
    "- Suggesting fixes for your code\n",
    "- Teaching you new concepts\n",
    "\n",
    "We'll also provide you with our own local version! Let's get you access right now.\n",
    "\n",
    "**Tip**: When asking ChatGPT for help, include your code and the error message you're getting.\n",
    "\n",
    "### Documentation\n",
    "Every programming language and library has documentation - official guides that explain how things work. Python's documentation is at [python.org](https://docs.python.org)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Practice Exercise\n",
    "\n",
    "Let's put it all together! Try to complete this small exercise using the concepts we've learned:\n",
    "\n",
    "**Goal**: Create a simple introduction program that:\n",
    "1. Stores your name in a variable\n",
    "2. Stores your age in a variable\n",
    "3. Prints a message introducing yourself\n",
    "\n",
    "Use the cell below to write your code:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Write your introduction program here!\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Challenge Exercise\n",
    "\n",
    "Let's put it all together! Try to complete this small exercise using the concepts we've learned. Remember, code runs very simply from top to bottom.\n",
    "\n",
    "**Goal**: Create a simple introduction program that:\n",
    "Switches the values of the `a` and `b` variables\n",
    "\n",
    "Use the cell below to write your code:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "a = 5\n",
    "b = 10\n",
    "\n",
    "# Write code that will switch the values of a and b here:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Key Takeaways\n",
    "\n",
    "🎯 **Programming is about problem-solving, not memorization**\n",
    "\n",
    "🔧 **Most of your time will be spent debugging and testing - this is normal!**\n",
    "\n",
    "📚 **Learn to find help online - Google, Stack Overflow, and ChatGPT are your friends**\n",
    "\n",
    "🧱 **Build step by step - test small pieces before adding more**\n",
    "\n",
    "📖 **Read error messages carefully - they're trying to help you**\n",
    "\n",
    "---\n",
    "\n",
    "Great job completing your first lesson! In the next module, we'll start writing actual Python code and create some fun graphics with turtle drawings. 🐢"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}